
Selenium Library:
https://robotframework.org/SeleniumLibrary/SeleniumLibrary.html#Page%20Should%20Contain

database Library:
https://franz-see.github.io/Robotframework-Database-Library/api/0.5/DatabaseLibrary.html

Excel Library:
https://rawgit.com/peterservice-rnd/robotframework-excellib/master/docs/ExcelLibrary.html

Built In Library:
http://robotframework.org/robotframework/2.8.7/libraries/BuiltIn.html

Postgres db
pip install robotframework-postgresqldb


pip show robotframework   to get detailed lib details
pip check robotframework


Note: 
Python version must be <= 3.7 then we can use ride as editor
Command to install library
D:\demoProjects\userDefinedKeywords
python -m pip install robotframework-seleniumlibrary
pip install robotframework-ride
pip install robotframework-datadriver==0.0.5
pip install robotframework-excellib
pip install PyMySQL
pip install openpyxl
pip install robotframework-crypto

parallele Execution
Headless Execution

============================MYSQL DB==========================================
DB:localhost or 127.0.0.1
url: ranjanblr2019@gmail.com
username: root
pwd:Mysql2022@@@

==============================Postgressdb===========================================
username: postgres
Password: postgres
portnumber: 5432

to list all db
	\l;

to select db
	\c ecom
You are now connected to database "ecom" as user "postgres".

To see all tables
	\dt

Craeting tables
CREATE TABLE customers(
   ID INT PRIMARY KEY     NOT NULL,
   NAME           TEXT    NOT NULL,
   EMAIL          TEXT,
   PHONE          CHAR(13),
   ADDRESS        CHAR(50)

);



To execute test in vmd
======================
simple run: robot regression.robot
selected test execution: robot --include reg GUI_scripts.robot
it must have 02 or more than 2
pabot --processes 3  --include reg  D:\demoProjects\testcases


API Testing
======================
https://www.youtube.com/watch?v=LSRp2IwMAhM&list=PLUDwpEzHYYLvMLbma_Rp-6jrrpxkeH0VJ
API Link: https://reqres.in/
65563
pip requests
pip install robotframework-requests
pip install  -u robotframework-jsonlibrary   to validate api request

JSON Node Data Verifier
========================
https://jsonpath.com/

$.Name
$.Address.City

XMl data Validation
.// refer root node

Authentications
===================
Basic Authentication
Bearer Authentication
API Key Authentication

Basic Authentication
-------------------------
${auth} = Create List	usernamepassword
Create Session	mysession	${base_url}	auth=${auth}
${response}=	get Request	mysession	URI(endpoint)	
log	${response.content}

Bearer Authentication
---------------------
${base_url}=	'https//google.com/'
${bearer_token}=	bdkfjk498tsdfew4t9w3

Create Session	mysession	${base_url}=
${headers}	Craete Dictionary	Authorization=${bearer_token}	Content-Type=Application/json
${req_body}=	get File	FilePath
$response}	post request	mysession	data=${req_body}	headers=${headers}
log	${response.content}

API Authentication
---------------------
Create Session	mysession	${base_url}=
${params}=	Craete Dictionary	key=API_KEY
${response}=	get Request	mysession	URI(endpoint)	params=${params}





Github as code Repository
===============================
username: rkumar1433@gmail.com
Password:Automation123@@@

or create a new repository on the command line
echo "# robot_project" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M master
git remote add origin https://github.com/RanjanShrivastva/robot_project.git
git push -u origin master


git remote add origin https://github.com/RanjanShrivastva/robot_project.git
git branch -M master
git push -u origin master
git branch -a  --> To list all branch
git pull

reate the branch on your local machine and switch in this branch :
$ git checkout -b [name_of_your_new_branch]

Delete a branch on your local filesystem :
$ git branch -d [name_of_your_new_branch]

To force the deletion of local branch on your filesystem :
$ git branch -D [name_of_your_new_branch]




Jenkin installation and use 
==============================================
password location  C:\Users\ranja\.jenkins\secrets
password: 33882a5f3aa34133a7ef18becea490ff
password1:  2bc3279020df45029b3f87f245d1d86a


username: automation
Password: Automation2022@@@
name: automation
Email: rkumar1433@gmail.com
http://localhost:8888/


============To see execution===============
reference: http://learnseleniumtesting.com/jenkins-and-continuous-test-execution/
run the agentlike below
Dashboard\manage Jenkins\ManageNodes and Clouds
Click on Agent slave_Node_1
click on "Launch"
run the jlnp
build run you program using build with param


==================outputdir======================
1997/01/27 18:30 
%date:~-4,4%%date:~-10,2%%date:~-7,2% 
year: appending with %date:~-4,4% the last 4 characters of the current locale date which is obviously the year,
day: appending with %date:~-10,2% the tenth and ninth characters from right side of the current locale date which is most likely the month,
month: appending with %date:~-7,2% the seventh and sixth characters from right side of the current locale date which is most likely the day,


=======================Xpath=====================
../--> used go one node up
/*  --> used to go one node down

Two types of xpath
1) Absolute XPath : 
	It is the direct way to find the element, 
	but the disadvantage of the absolute XPath is that 
	if there are any changes made in the path of the element then that XPath gets failed
	The key characteristic of XPath is that it begins with the single forward slash(/) ,
	which means you can select the element from the root node.
2) Relative XPath
	Relative Xpath starts from the middle of HTML DOM structure. 
	It starts with double forward slash (//). 
	It can search elements anywhere on the webpage, 
	means no need to write a long xpath and you can start from the middle of HTML DOM structure. 
	Relative Xpath is always preferred as it is not a complete path from the root element.

How To Write Dynamic XPath In Selenium WebDriver
1) Basic XPath: basis of attributes like ID , Name, Classname, etc
	Xpath=//input[@name='uid']
2) Contains():
	Xpath=//*[contains(@type,'sub')]
	Xpath=//*[contains(@name,'btn')]
	Xpath=//*[contains(text(),'here')]
	Xpath=//*[contains(@href,'guru99.com')]
	
3) Using OR & AND:
	Xpath=//*[@type='submit' or @name='btnReset']
	Xpath=//input[@type='submit' and @name='btnLogin']

4) Xpath Starts-with
	For example -: Suppose the ID of particular element changes dynamically like:
	Id=” message12″
	Id=” message345″
	Id=” message8769″
	EX Xpath=//label[starts-with(@id,'message')]

5) XPath Text() Function
	Xpath=//td[text()='UserID']

6 a) Following:
	Xpath=//*[@type='text']//following::input
	Xpath=//*[@type='text']//following::input[1]
	
b) Ancestor:
	Xpath=//*[text()='Enterprise Testing']//ancestor::div

c) Child:
	Xpath=//*[@id='java_technologies']//child::li[1]

d) Preceding:
	Xpath=//*[@type='submit']//preceding::input[1]
	
e) Following-sibling:
	xpath=//*[@type='submit']//following-sibling::input

f) Parent:
	Xpath=//*[@id='rt-feature']//parent::div
	
g) Self:
	Xpath =//*[@type='password']//self::input

h) Descendant:
	Xpath=//*[@id='rt-feature']//descendant::a[1]




https://www.guru99.com/xpath-selenium.html
Xpath=//tagname[@attribute='value']
ex: Xpath=//input[@name='uid']
Xpath=//*[contains(text(),'text')]
OR and AND
Xpath=//*[@type='submit' or @name='btnReset']
Xpath=//input[@type='submit' and @name='btnLogin']
Starts with
Xpath=//label[starts-with(@id,'message')]
text
Xpath=//td[text()='UserID']



Additional topics
===================
Can we use Webdrivermanager in Robot framework
Python Basics - coding
For/If Else/Switch/loops – Coding
User Defined Modules-->Done
Optimizing Waits in scripts--Done
Page Object Model--Done
Data Driven through CVS/Xls or any other source (Single sheet mapping to different test cases)
Exception Handling
How to handle Tabbed - Browser windows/Complex elements--> look for this
Test Report to generated with timestamp(so the reports are not overwritten)-->Done
Data base connectivity & Validation-->Done
Parallel Test Execution / Selenium Grid--Done suing pabot
Triggering Jobs in b/w the test execution (Connecting to terminal during execution)
Wait period of x mins for the jobs to complete
How to set variable values from Run time command arguments to Robot framework (like browser , tags etc)
Generation of emails after test execution for reports--Done
Integration with Jenkins/GIT etc--Done
API automation--Done
Other features/capabilities of Robot framework, you may be aware of






 
